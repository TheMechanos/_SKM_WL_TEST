
_SKM_WL_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001664  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001838  08001838  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001838  08001838  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001838  08001838  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001838  08001838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800183c  0800183c  0001183c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800184c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800184c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e31  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001278  00000000  00000000  00025e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  000270e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  000279d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f719  00000000  00000000  00028238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a17  00000000  00000000  00047951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca20e  00000000  00000000  00050368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a576  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  0011a5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08001784 	.word	0x08001784

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08001784 	.word	0x08001784

08000178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000188:	e7fe      	b.n	8000188 <NMI_Handler+0x4>

0800018a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800018a:	b480      	push	{r7}
 800018c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800018e:	e7fe      	b.n	800018e <HardFault_Handler+0x4>

08000190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000194:	e7fe      	b.n	8000194 <MemManage_Handler+0x4>

08000196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000196:	b480      	push	{r7}
 8000198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800019a:	e7fe      	b.n	800019a <BusFault_Handler+0x4>

0800019c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <UsageFault_Handler+0x4>

080001a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001a2:	b480      	push	{r7}
 80001a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001a6:	bf00      	nop
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001ae:	b480      	push	{r7}
 80001b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001ba:	b480      	push	{r7}
 80001bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001c6:	b580      	push	{r7, lr}
 80001c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001ca:	f000 f8f5 	bl	80003b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}

080001d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d2:	b480      	push	{r7}
 80001d4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr

080001de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 f88f 	bl	8000304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f801 	bl	80001ec <_Z18SystemClock_Configv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <main+0xc>

080001ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b09a      	sub	sp, #104	; 0x68
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0320 	add.w	r3, r7, #32
 80001f6:	2248      	movs	r2, #72	; 0x48
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 faba 	bl	8001774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0308 	add.w	r3, r7, #8
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
 8000210:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000212:	4b23      	ldr	r3, [pc, #140]	; (80002a0 <_Z18SystemClock_Configv+0xb4>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800021a:	4a21      	ldr	r2, [pc, #132]	; (80002a0 <_Z18SystemClock_Configv+0xb4>)
 800021c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <_Z18SystemClock_Configv+0xb4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800022e:	2320      	movs	r3, #32
 8000230:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000236:	2300      	movs	r3, #0
 8000238:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800023a:	2360      	movs	r3, #96	; 0x60
 800023c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0320 	add.w	r3, r7, #32
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fc48 	bl	8000adc <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	bf14      	ite	ne
 8000252:	2301      	movne	r3, #1
 8000254:	2300      	moveq	r3, #0
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800025c:	f000 f822 	bl	80002a4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000260:	234f      	movs	r3, #79	; 0x4f
 8000262:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ffc6 	bl	8001210 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	bf14      	ite	ne
 800028a:	2301      	movne	r3, #1
 800028c:	2300      	moveq	r3, #0
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8000294:	f000 f806 	bl	80002a4 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3768      	adds	r7, #104	; 0x68
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	58000400 	.word	0x58000400

080002a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a8:	b672      	cpsid	i
}
 80002aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ac:	e7fe      	b.n	80002ac <Error_Handler+0x8>
	...

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f7ff ff8d 	bl	80001d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	; (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	; (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f001 fa25 	bl	800172c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ff7c 	bl	80001de <main>

080002e6 <LoopForever>:

LoopForever:
    b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80002f4:	08001840 	.word	0x08001840
  ldr r2, =_sbss
 80002f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80002fc:	2000002c 	.word	0x2000002c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800030a:	2300      	movs	r3, #0
 800030c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800030e:	2003      	movs	r0, #3
 8000310:	f000 f91e 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000314:	f001 f940 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 8000318:	4603      	mov	r3, r0
 800031a:	4a09      	ldr	r2, [pc, #36]	; (8000340 <HAL_Init+0x3c>)
 800031c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800031e:	200f      	movs	r0, #15
 8000320:	f000 f810 	bl	8000344 <HAL_InitTick>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d002      	beq.n	8000330 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800032a:	2301      	movs	r3, #1
 800032c:	71fb      	strb	r3, [r7, #7]
 800032e:	e001      	b.n	8000334 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000330:	f7ff ff22 	bl	8000178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000334:	79fb      	ldrb	r3, [r7, #7]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000000 	.word	0x20000000

08000344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <HAL_InitTick+0x6c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d024      	beq.n	80003a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000358:	f001 f91e 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 800035c:	4602      	mov	r2, r0
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <HAL_InitTick+0x6c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4619      	mov	r1, r3
 8000364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000368:	fbb3 f3f1 	udiv	r3, r3, r1
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f912 	bl	800059a <HAL_SYSTICK_Config>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10f      	bne.n	800039c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b0f      	cmp	r3, #15
 8000380:	d809      	bhi.n	8000396 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000382:	2200      	movs	r2, #0
 8000384:	6879      	ldr	r1, [r7, #4]
 8000386:	f04f 30ff 	mov.w	r0, #4294967295
 800038a:	f000 f8ec 	bl	8000566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <HAL_InitTick+0x70>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6013      	str	r3, [r2, #0]
 8000394:	e007      	b.n	80003a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000396:	2301      	movs	r3, #1
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e004      	b.n	80003a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800039c:	2301      	movs	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e001      	b.n	80003a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80003a2:	2301      	movs	r3, #1
 80003a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000008 	.word	0x20000008
 80003b4:	20000004 	.word	0x20000004

080003b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <HAL_IncTick+0x1c>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <HAL_IncTick+0x20>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <HAL_IncTick+0x20>)
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	20000008 	.word	0x20000008
 80003d8:	20000028 	.word	0x20000028

080003dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  return uwTick;
 80003e0:	4b02      	ldr	r3, [pc, #8]	; (80003ec <HAL_GetTick+0x10>)
 80003e2:	681b      	ldr	r3, [r3, #0]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	20000028 	.word	0x20000028

080003f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <__NVIC_SetPriorityGrouping+0x44>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800040c:	4013      	ands	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800041c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000422:	4a04      	ldr	r2, [pc, #16]	; (8000434 <__NVIC_SetPriorityGrouping+0x44>)
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	60d3      	str	r3, [r2, #12]
}
 8000428:	bf00      	nop
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <__NVIC_GetPriorityGrouping+0x18>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	0a1b      	lsrs	r3, r3, #8
 8000442:	f003 0307 	and.w	r3, r3, #7
}
 8000446:	4618      	mov	r0, r3
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000464:	2b00      	cmp	r3, #0
 8000466:	db0a      	blt.n	800047e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	b2da      	uxtb	r2, r3
 800046c:	490c      	ldr	r1, [pc, #48]	; (80004a0 <__NVIC_SetPriority+0x4c>)
 800046e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000472:	0112      	lsls	r2, r2, #4
 8000474:	b2d2      	uxtb	r2, r2
 8000476:	440b      	add	r3, r1
 8000478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800047c:	e00a      	b.n	8000494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4908      	ldr	r1, [pc, #32]	; (80004a4 <__NVIC_SetPriority+0x50>)
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	f003 030f 	and.w	r3, r3, #15
 800048a:	3b04      	subs	r3, #4
 800048c:	0112      	lsls	r2, r2, #4
 800048e:	b2d2      	uxtb	r2, r2
 8000490:	440b      	add	r3, r1
 8000492:	761a      	strb	r2, [r3, #24]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000e100 	.word	0xe000e100
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b089      	sub	sp, #36	; 0x24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f003 0307 	and.w	r3, r3, #7
 80004ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	f1c3 0307 	rsb	r3, r3, #7
 80004c2:	2b04      	cmp	r3, #4
 80004c4:	bf28      	it	cs
 80004c6:	2304      	movcs	r3, #4
 80004c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	3304      	adds	r3, #4
 80004ce:	2b06      	cmp	r3, #6
 80004d0:	d902      	bls.n	80004d8 <NVIC_EncodePriority+0x30>
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	3b03      	subs	r3, #3
 80004d6:	e000      	b.n	80004da <NVIC_EncodePriority+0x32>
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004dc:	f04f 32ff 	mov.w	r2, #4294967295
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	43da      	mvns	r2, r3
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	401a      	ands	r2, r3
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004f0:	f04f 31ff 	mov.w	r1, #4294967295
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43d9      	mvns	r1, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000500:	4313      	orrs	r3, r2
         );
}
 8000502:	4618      	mov	r0, r3
 8000504:	3724      	adds	r7, #36	; 0x24
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3b01      	subs	r3, #1
 8000518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800051c:	d301      	bcc.n	8000522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800051e:	2301      	movs	r3, #1
 8000520:	e00f      	b.n	8000542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <SysTick_Config+0x40>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3b01      	subs	r3, #1
 8000528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800052a:	210f      	movs	r1, #15
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f7ff ff90 	bl	8000454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <SysTick_Config+0x40>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <SysTick_Config+0x40>)
 800053c:	2207      	movs	r2, #7
 800053e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	e000e010 	.word	0xe000e010

08000550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff ff49 	bl	80003f0 <__NVIC_SetPriorityGrouping>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
 8000572:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000574:	f7ff ff60 	bl	8000438 <__NVIC_GetPriorityGrouping>
 8000578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	68b9      	ldr	r1, [r7, #8]
 800057e:	6978      	ldr	r0, [r7, #20]
 8000580:	f7ff ff92 	bl	80004a8 <NVIC_EncodePriority>
 8000584:	4602      	mov	r2, r0
 8000586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff61 	bl	8000454 <__NVIC_SetPriority>
}
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ffb2 	bl	800050c <SysTick_Config>
 80005a8:	4603      	mov	r3, r0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80005be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	58000400 	.word	0x58000400

080005d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_PWREx_GetVoltageRange+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	58000400 	.word	0x58000400

080005e8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005f8:	d101      	bne.n	80005fe <LL_PWR_IsEnabledBkUpAccess+0x16>
 80005fa:	2301      	movs	r3, #1
 80005fc:	e000      	b.n	8000600 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	58000400 	.word	0x58000400

0800060c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800061a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800062c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000656:	d101      	bne.n	800065c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000658:	2301      	movs	r3, #1
 800065a:	e000      	b.n	800065e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800066a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000678:	6013      	str	r3, [r2, #0]
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000694:	6013      	str	r3, [r2, #0]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80006a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006b0:	d101      	bne.n	80006b6 <LL_RCC_HSE_IsReady+0x18>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <LL_RCC_HSE_IsReady+0x1a>
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80006e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80006fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800070a:	d101      	bne.n	8000710 <LL_RCC_HSI_IsReady+0x18>
 800070c:	2301      	movs	r3, #1
 800070e:	e000      	b.n	8000712 <LL_RCC_HSI_IsReady+0x1a>
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	061b      	lsls	r3, r3, #24
 8000730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000734:	4313      	orrs	r3, r2
 8000736:	604b      	str	r3, [r1, #4]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	2b02      	cmp	r3, #2
 8000754:	d101      	bne.n	800075a <LL_RCC_LSE_IsReady+0x18>
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <LL_RCC_LSE_IsReady+0x1a>
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000794:	f023 0301 	bic.w	r3, r3, #1
 8000798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d101      	bne.n	80007bc <LL_RCC_LSI_IsReady+0x18>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <LL_RCC_LSI_IsReady+0x1a>
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80007ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6013      	str	r3, [r2, #0]
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80007e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007f0:	f023 0301 	bic.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	2b02      	cmp	r3, #2
 800080e:	d101      	bne.n	8000814 <LL_RCC_MSI_IsReady+0x16>
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <LL_RCC_MSI_IsReady+0x18>
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	2b08      	cmp	r3, #8
 800082e:	d101      	bne.n	8000834 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000860:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000886:	4313      	orrs	r3, r2
 8000888:	604b      	str	r3, [r1, #4]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800089c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f023 0203 	bic.w	r2, r3, #3
 80008a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	608b      	str	r3, [r1, #8]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 030c 	and.w	r3, r3, #12
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80008e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	608b      	str	r3, [r1, #8]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000902:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000906:	f023 020f 	bic.w	r2, r3, #15
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000912:	4313      	orrs	r3, r2
 8000914:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800092a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4313      	orrs	r3, r2
 800093c:	608b      	str	r3, [r1, #8]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800095a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4313      	orrs	r3, r2
 8000962:	608b      	str	r3, [r1, #8]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80009be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009cc:	6013      	str	r3, [r2, #0]
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80009da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80009e8:	d101      	bne.n	80009ee <LL_RCC_PLL_IsReady+0x18>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <LL_RCC_PLL_IsReady+0x1a>
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	f003 0303 	and.w	r3, r3, #3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a64:	d101      	bne.n	8000a6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a88:	d101      	bne.n	8000a8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000aaa:	d101      	bne.n	8000ab0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000acc:	d101      	bne.n	8000ad2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e38a      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aee:	f7ff fee4 	bl	80008ba <LL_RCC_GetSysClkSource>
 8000af2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000af4:	f7ff ffa2 	bl	8000a3c <LL_RCC_PLL_GetMainSource>
 8000af8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 80c9 	beq.w	8000c9a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d005      	beq.n	8000b1a <HAL_RCC_OscConfig+0x3e>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	2b0c      	cmp	r3, #12
 8000b12:	d17b      	bne.n	8000c0c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d178      	bne.n	8000c0c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b1a:	f7ff fe70 	bl	80007fe <LL_RCC_MSI_IsReady>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d005      	beq.n	8000b30 <HAL_RCC_OscConfig+0x54>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e369      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <HAL_RCC_OscConfig+0x72>
 8000b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b4c:	e006      	b.n	8000b5c <HAL_RCC_OscConfig+0x80>
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d222      	bcs.n	8000ba6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fd2b 	bl	80015c0 <RCC_SetFlashLatencyFromMSIRange>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e347      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b96:	4313      	orrs	r3, r2
 8000b98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe64 	bl	800086c <LL_RCC_MSI_SetCalibTrimming>
 8000ba4:	e021      	b.n	8000bea <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe4b 	bl	800086c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fcf0 	bl	80015c0 <RCC_SetFlashLatencyFromMSIRange>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e30c      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000bea:	f000 fcd5 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4ab4      	ldr	r2, [pc, #720]	; (8000ec4 <HAL_RCC_OscConfig+0x3e8>)
 8000bf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000bf4:	4bb4      	ldr	r3, [pc, #720]	; (8000ec8 <HAL_RCC_OscConfig+0x3ec>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fba3 	bl	8000344 <HAL_InitTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8000c02:	7cfb      	ldrb	r3, [r7, #19]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d047      	beq.n	8000c98 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8000c08:	7cfb      	ldrb	r3, [r7, #19]
 8000c0a:	e2fb      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d02c      	beq.n	8000c6e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c14:	f7ff fdd7 	bl	80007c6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fbe0 	bl	80003dc <HAL_GetTick>
 8000c1c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c20:	f7ff fbdc 	bl	80003dc <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e2e8      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8000c32:	f7ff fde4 	bl	80007fe <LL_RCC_MSI_IsReady>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f1      	beq.n	8000c20 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fe00 	bl	800086c <LL_RCC_MSI_SetCalibTrimming>
 8000c6c:	e015      	b.n	8000c9a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c6e:	f7ff fdb8 	bl	80007e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c72:	f7ff fbb3 	bl	80003dc <HAL_GetTick>
 8000c76:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fbaf 	bl	80003dc <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e2bb      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8000c8c:	f7ff fdb7 	bl	80007fe <LL_RCC_MSI_IsReady>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f1      	bne.n	8000c7a <HAL_RCC_OscConfig+0x19e>
 8000c96:	e000      	b.n	8000c9a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c98:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d05f      	beq.n	8000d66 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d005      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x1dc>
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	2b0c      	cmp	r3, #12
 8000cb0:	d10d      	bne.n	8000cce <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d10a      	bne.n	8000cce <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb8:	f7ff fcf1 	bl	800069e <LL_RCC_HSE_IsReady>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d050      	beq.n	8000d64 <HAL_RCC_OscConfig+0x288>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d14c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e29a      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8000cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cec:	d102      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x218>
 8000cee:	f7ff fcba 	bl	8000666 <LL_RCC_HSE_Enable>
 8000cf2:	e00d      	b.n	8000d10 <HAL_RCC_OscConfig+0x234>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000cfc:	d104      	bne.n	8000d08 <HAL_RCC_OscConfig+0x22c>
 8000cfe:	f7ff fc85 	bl	800060c <LL_RCC_HSE_EnableTcxo>
 8000d02:	f7ff fcb0 	bl	8000666 <LL_RCC_HSE_Enable>
 8000d06:	e003      	b.n	8000d10 <HAL_RCC_OscConfig+0x234>
 8000d08:	f7ff fcbb 	bl	8000682 <LL_RCC_HSE_Disable>
 8000d0c:	f7ff fc8c 	bl	8000628 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d012      	beq.n	8000d3e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d18:	f7ff fb60 	bl	80003dc <HAL_GetTick>
 8000d1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fb5c 	bl	80003dc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	; 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e268      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8000d32:	f7ff fcb4 	bl	800069e <LL_RCC_HSE_IsReady>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f1      	beq.n	8000d20 <HAL_RCC_OscConfig+0x244>
 8000d3c:	e013      	b.n	8000d66 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d3e:	f7ff fb4d 	bl	80003dc <HAL_GetTick>
 8000d42:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8000d44:	e008      	b.n	8000d58 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d46:	f7ff fb49 	bl	80003dc <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b64      	cmp	r3, #100	; 0x64
 8000d52:	d901      	bls.n	8000d58 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e255      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8000d58:	f7ff fca1 	bl	800069e <LL_RCC_HSE_IsReady>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f1      	bne.n	8000d46 <HAL_RCC_OscConfig+0x26a>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d04b      	beq.n	8000e0a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d005      	beq.n	8000d84 <HAL_RCC_OscConfig+0x2a8>
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	d113      	bne.n	8000da6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d110      	bne.n	8000da6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d84:	f7ff fcb8 	bl	80006f8 <LL_RCC_HSI_IsReady>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_OscConfig+0x2be>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e234      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fcbb 	bl	800071a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000da4:	e031      	b.n	8000e0a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d019      	beq.n	8000de2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dae:	f7ff fc87 	bl	80006c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db2:	f7ff fb13 	bl	80003dc <HAL_GetTick>
 8000db6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dba:	f7ff fb0f 	bl	80003dc <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e21b      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8000dcc:	f7ff fc94 	bl	80006f8 <LL_RCC_HSI_IsReady>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f1      	beq.n	8000dba <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fc9d 	bl	800071a <LL_RCC_HSI_SetCalibTrimming>
 8000de0:	e013      	b.n	8000e0a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000de2:	f7ff fc7b 	bl	80006dc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de6:	f7ff faf9 	bl	80003dc <HAL_GetTick>
 8000dea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dee:	f7ff faf5 	bl	80003dc <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e201      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8000e00:	f7ff fc7a 	bl	80006f8 <LL_RCC_HSI_IsReady>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f1      	bne.n	8000dee <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d06e      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d056      	beq.n	8000ecc <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8000e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e26:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69da      	ldr	r2, [r3, #28]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d031      	beq.n	8000e9a <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e1da      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8000e58:	f7ff fc94 	bl	8000784 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000e5c:	f7ff fabe 	bl	80003dc <HAL_GetTick>
 8000e60:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff faba 	bl	80003dc <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b11      	cmp	r3, #17
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1c6      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8000e76:	f7ff fc95 	bl	80007a4 <LL_RCC_LSI_IsReady>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f1      	bne.n	8000e64 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e88:	f023 0210 	bic.w	r2, r3, #16
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e94:	4313      	orrs	r3, r2
 8000e96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9a:	f7ff fc63 	bl	8000764 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fa9d 	bl	80003dc <HAL_GetTick>
 8000ea2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea6:	f7ff fa99 	bl	80003dc <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b11      	cmp	r3, #17
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e1a5      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8000eb8:	f7ff fc74 	bl	80007a4 <LL_RCC_LSI_IsReady>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f1      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x3ca>
 8000ec2:	e017      	b.n	8000ef4 <HAL_RCC_OscConfig+0x418>
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ecc:	f7ff fc5a 	bl	8000784 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fa84 	bl	80003dc <HAL_GetTick>
 8000ed4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fa80 	bl	80003dc <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b11      	cmp	r3, #17
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e18c      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8000eea:	f7ff fc5b 	bl	80007a4 <LL_RCC_LSI_IsReady>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f1      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80d8 	beq.w	80010b2 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8000f02:	f7ff fb71 	bl	80005e8 <LL_PWR_IsEnabledBkUpAccess>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d113      	bne.n	8000f34 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8000f0c:	f7ff fb52 	bl	80005b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fa64 	bl	80003dc <HAL_GetTick>
 8000f14:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f18:	f7ff fa60 	bl	80003dc <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e16c      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8000f2a:	f7ff fb5d 	bl	80005e8 <LL_PWR_IsEnabledBkUpAccess>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f1      	beq.n	8000f18 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d07b      	beq.n	8001034 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b85      	cmp	r3, #133	; 0x85
 8000f42:	d003      	beq.n	8000f4c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d109      	bne.n	8000f60 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f60:	f7ff fa3c 	bl	80003dc <HAL_GetTick>
 8000f64:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8000f7a:	e00a      	b.n	8000f92 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fa2e 	bl	80003dc <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e138      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8000f92:	f7ff fbd6 	bl	8000742 <LL_RCC_LSE_IsReady>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0ef      	beq.n	8000f7c <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b81      	cmp	r3, #129	; 0x81
 8000fa2:	d003      	beq.n	8000fac <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b85      	cmp	r3, #133	; 0x85
 8000faa:	d121      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	f7ff fa16 	bl	80003dc <HAL_GetTick>
 8000fb0:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fa08 	bl	80003dc <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e112      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ec      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8000fee:	e060      	b.n	80010b2 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff f9f4 	bl	80003dc <HAL_GetTick>
 8000ff4:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800100a:	e00a      	b.n	8001022 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100c:	f7ff f9e6 	bl	80003dc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f241 3288 	movw	r2, #5000	; 0x1388
 800101a:	4293      	cmp	r3, r2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e0f0      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800102a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1ec      	bne.n	800100c <HAL_RCC_OscConfig+0x530>
 8001032:	e03e      	b.n	80010b2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001034:	f7ff f9d2 	bl	80003dc <HAL_GetTick>
 8001038:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800103a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800104a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800104e:	e00a      	b.n	8001066 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f7ff f9c4 	bl	80003dc <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f241 3288 	movw	r2, #5000	; 0x1388
 800105e:	4293      	cmp	r3, r2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e0ce      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800106e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1ec      	bne.n	8001050 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001076:	f7ff f9b1 	bl	80003dc <HAL_GetTick>
 800107a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff f9a3 	bl	80003dc <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e0ad      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80010a8:	f7ff fb4b 	bl	8000742 <LL_RCC_LSE_IsReady>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ef      	bne.n	8001092 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80a3 	beq.w	8001202 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	d076      	beq.n	80011b0 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d14b      	bne.n	8001162 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	f7ff fc76 	bl	80009ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff f985 	bl	80003dc <HAL_GetTick>
 80010d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff f981 	bl	80003dc <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e08d      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80010e8:	f7ff fc75 	bl	80009d6 <LL_RCC_PLL_IsReady>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f1      	bne.n	80010d6 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_RCC_OscConfig+0x730>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001104:	4311      	orrs	r1, r2
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800110a:	0212      	lsls	r2, r2, #8
 800110c:	4311      	orrs	r1, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001112:	4311      	orrs	r1, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001118:	4311      	orrs	r1, r2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800111e:	430a      	orrs	r2, r1
 8001120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001124:	4313      	orrs	r3, r2
 8001126:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001128:	f7ff fc39 	bl	800099e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800112c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113c:	f7ff f94e 	bl	80003dc <HAL_GetTick>
 8001140:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff f94a 	bl	80003dc <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e056      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001156:	f7ff fc3e 	bl	80009d6 <LL_RCC_PLL_IsReady>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f1      	beq.n	8001144 <HAL_RCC_OscConfig+0x668>
 8001160:	e04f      	b.n	8001202 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	f7ff fc2a 	bl	80009ba <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001170:	f023 0303 	bic.w	r3, r3, #3
 8001174:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001180:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001188:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff f927 	bl	80003dc <HAL_GetTick>
 800118e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff f923 	bl	80003dc <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b0a      	cmp	r3, #10
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e02f      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80011a4:	f7ff fc17 	bl	80009d6 <LL_RCC_PLL_IsReady>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f1      	bne.n	8001192 <HAL_RCC_OscConfig+0x6b6>
 80011ae:	e028      	b.n	8001202 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e023      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f003 0203 	and.w	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d115      	bne.n	80011fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011dc:	429a      	cmp	r2, r3
 80011de:	d10e      	bne.n	80011fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	11c1808c 	.word	0x11c1808c

08001210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e10f      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001224:	4b89      	ldr	r3, [pc, #548]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d91b      	bls.n	800126a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b86      	ldr	r3, [pc, #536]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 0207 	bic.w	r2, r3, #7
 800123a:	4984      	ldr	r1, [pc, #528]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001242:	f7ff f8cb 	bl	80003dc <HAL_GetTick>
 8001246:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001248:	e008      	b.n	800125c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800124a:	f7ff f8c7 	bl	80003dc <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0f3      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800125c:	4b7b      	ldr	r3, [pc, #492]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d1ef      	bne.n	800124a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d016      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fb28 	bl	80008d0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001280:	f7ff f8ac 	bl	80003dc <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001288:	f7ff f8a8 	bl	80003dc <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e0d4      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800129a:	f7ff fbda 	bl	8000a52 <LL_RCC_IsActiveFlag_HPRE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f1      	beq.n	8001288 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d016      	beq.n	80012de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fb1e 	bl	80008f6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80012ba:	f7ff f88f 	bl	80003dc <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80012c2:	f7ff f88b 	bl	80003dc <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e0b7      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80012d4:	f7ff fbce 	bl	8000a74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f1      	beq.n	80012c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d016      	beq.n	8001318 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fb17 	bl	8000922 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80012f4:	f7ff f872 	bl	80003dc <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80012fc:	f7ff f86e 	bl	80003dc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e09a      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800130e:	f7ff fbc3 	bl	8000a98 <LL_RCC_IsActiveFlag_PPRE1>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f1      	beq.n	80012fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	2b00      	cmp	r3, #0
 8001322:	d017      	beq.n	8001354 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb0c 	bl	8000948 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001330:	f7ff f854 	bl	80003dc <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001338:	f7ff f850 	bl	80003dc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e07c      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800134a:	f7ff fbb6 	bl	8000aba <LL_RCC_IsActiveFlag_PPRE2>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f1      	beq.n	8001338 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d043      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d106      	bne.n	8001376 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001368:	f7ff f999 	bl	800069e <LL_RCC_HSE_IsReady>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11e      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e066      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d106      	bne.n	800138c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800137e:	f7ff fb2a 	bl	80009d6 <LL_RCC_PLL_IsReady>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d113      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e05b      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001394:	f7ff fa33 	bl	80007fe <LL_RCC_MSI_IsReady>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e050      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80013a2:	f7ff f9a9 	bl	80006f8 <LL_RCC_HSI_IsReady>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e049      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fa6d 	bl	8000894 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ba:	f7ff f80f 	bl	80003dc <HAL_GetTick>
 80013be:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c2:	f7ff f80b 	bl	80003dc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e035      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d8:	f7ff fa6f 	bl	80008ba <LL_RCC_GetSysClkSource>
 80013dc:	4602      	mov	r2, r0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d1ec      	bne.n	80013c2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d21b      	bcs.n	800142e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 0207 	bic.w	r2, r3, #7
 80013fe:	4913      	ldr	r1, [pc, #76]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001406:	f7fe ffe9 	bl	80003dc <HAL_GetTick>
 800140a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140c:	e008      	b.n	8001420 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800140e:	f7fe ffe5 	bl	80003dc <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e011      	b.n	8001444 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_RCC_ClockConfig+0x23c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d1ef      	bne.n	800140e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800142e:	f000 f8b3 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 8001432:	4603      	mov	r3, r0
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_RCC_ClockConfig+0x240>)
 8001436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_RCC_ClockConfig+0x244>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff81 	bl	8000344 <HAL_InitTick>
 8001442:	4603      	mov	r3, r0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	58004000 	.word	0x58004000
 8001450:	20000000 	.word	0x20000000
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001466:	f7ff fa28 	bl	80008ba <LL_RCC_GetSysClkSource>
 800146a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146c:	f7ff fae6 	bl	8000a3c <LL_RCC_PLL_GetMainSource>
 8001470:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x2c>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d139      	bne.n	80014f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d136      	bne.n	80014f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001484:	f7ff f9cb 	bl	800081e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d115      	bne.n	80014ba <HAL_RCC_GetSysClockFreq+0x62>
 800148e:	f7ff f9c6 	bl	800081e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001492:	4603      	mov	r3, r0
 8001494:	2b01      	cmp	r3, #1
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8001498:	f7ff f9d1 	bl	800083e <LL_RCC_MSI_GetRange>
 800149c:	4603      	mov	r3, r0
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	e005      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80014a6:	f7ff f9d5 	bl	8000854 <LL_RCC_MSI_GetRangeAfterStandby>
 80014aa:	4603      	mov	r3, r0
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a36      	ldr	r2, [pc, #216]	; (800158c <HAL_RCC_GetSysClockFreq+0x134>)
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	e014      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80014ba:	f7ff f9b0 	bl	800081e <LL_RCC_MSI_IsEnabledRangeSelect>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80014c4:	f7ff f9bb 	bl	800083e <LL_RCC_MSI_GetRange>
 80014c8:	4603      	mov	r3, r0
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	e005      	b.n	80014de <HAL_RCC_GetSysClockFreq+0x86>
 80014d2:	f7ff f9bf 	bl	8000854 <LL_RCC_MSI_GetRangeAfterStandby>
 80014d6:	4603      	mov	r3, r0
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	4a2b      	ldr	r2, [pc, #172]	; (800158c <HAL_RCC_GetSysClockFreq+0x134>)
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d115      	bne.n	8001518 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80014f0:	e012      	b.n	8001518 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_RCC_GetSysClockFreq+0x138>)
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00c      	b.n	8001518 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b08      	cmp	r3, #8
 8001502:	d109      	bne.n	8001518 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001504:	f7ff f89e 	bl	8000644 <LL_RCC_HSE_IsEnabledDiv2>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_RCC_GetSysClockFreq+0x138>)
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e001      	b.n	8001518 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001516:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001518:	f7ff f9cf 	bl	80008ba <LL_RCC_GetSysClkSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d12f      	bne.n	8001582 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001522:	f7ff fa8b 	bl	8000a3c <LL_RCC_PLL_GetMainSource>
 8001526:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_RCC_GetSysClockFreq+0xde>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d003      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0xe4>
 8001534:	e00d      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_RCC_GetSysClockFreq+0x138>)
 8001538:	60fb      	str	r3, [r7, #12]
        break;
 800153a:	e00d      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800153c:	f7ff f882 	bl	8000644 <LL_RCC_HSE_IsEnabledDiv2>
 8001540:	4603      	mov	r3, r0
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_GetSysClockFreq+0x138>)
 8001548:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800154a:	e005      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_GetSysClockFreq+0x13c>)
 800154e:	60fb      	str	r3, [r7, #12]
        break;
 8001550:	e002      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	60fb      	str	r3, [r7, #12]
        break;
 8001556:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001558:	f7ff fa4e 	bl	80009f8 <LL_RCC_PLL_GetN>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	fb03 f402 	mul.w	r4, r3, r2
 8001564:	f7ff fa5f 	bl	8000a26 <LL_RCC_PLL_GetDivider>
 8001568:	4603      	mov	r3, r0
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	3301      	adds	r3, #1
 800156e:	fbb4 f4f3 	udiv	r4, r4, r3
 8001572:	f7ff fa4d 	bl	8000a10 <LL_RCC_PLL_GetR>
 8001576:	4603      	mov	r3, r0
 8001578:	0f5b      	lsrs	r3, r3, #29
 800157a:	3301      	adds	r3, #1
 800157c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001580:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001582:	697b      	ldr	r3, [r7, #20]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}
 800158c:	080017f8 	.word	0x080017f8
 8001590:	00f42400 	.word	0x00f42400
 8001594:	01e84800 	.word	0x01e84800

08001598 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001598:	b598      	push	{r3, r4, r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800159c:	f7ff ff5c 	bl	8001458 <HAL_RCC_GetSysClockFreq>
 80015a0:	4604      	mov	r4, r0
 80015a2:	f7ff f9e4 	bl	800096e <LL_RCC_GetAHBPrescaler>
 80015a6:	4603      	mov	r3, r0
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	4a03      	ldr	r2, [pc, #12]	; (80015bc <HAL_RCC_GetHCLKFreq+0x24>)
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	bd98      	pop	{r3, r4, r7, pc}
 80015bc:	080017b8 	.word	0x080017b8

080015c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80015d8:	f7ff f9d4 	bl	8000984 <LL_RCC_GetAHB3Prescaler>
 80015dc:	4603      	mov	r3, r0
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80015e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4a09      	ldr	r2, [pc, #36]	; (800161c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9c      	lsrs	r4, r3, #18
 80015fc:	f7fe ffe8 	bl	80005d0 <HAL_PWREx_GetVoltageRange>
 8001600:	4603      	mov	r3, r0
 8001602:	4619      	mov	r1, r3
 8001604:	4620      	mov	r0, r4
 8001606:	f000 f80b 	bl	8001620 <RCC_SetFlashLatency>
 800160a:	4603      	mov	r3, r0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	080017f8 	.word	0x080017f8
 8001618:	080017b8 	.word	0x080017b8
 800161c:	431bde83 	.word	0x431bde83

08001620 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800162a:	4a3c      	ldr	r2, [pc, #240]	; (800171c <RCC_SetFlashLatency+0xfc>)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001634:	6018      	str	r0, [r3, #0]
 8001636:	3304      	adds	r3, #4
 8001638:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800163a:	4a39      	ldr	r2, [pc, #228]	; (8001720 <RCC_SetFlashLatency+0x100>)
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001644:	6018      	str	r0, [r3, #0]
 8001646:	3304      	adds	r3, #4
 8001648:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800164a:	4a36      	ldr	r2, [pc, #216]	; (8001724 <RCC_SetFlashLatency+0x104>)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	ca07      	ldmia	r2, {r0, r1, r2}
 8001652:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001656:	2300      	movs	r3, #0
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001660:	d11d      	bne.n	800169e <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
 8001666:	e016      	b.n	8001696 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001670:	4413      	add	r3, r2
 8001672:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4293      	cmp	r3, r2
 800167c:	d808      	bhi.n	8001690 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001686:	4413      	add	r3, r2
 8001688:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800168e:	e023      	b.n	80016d8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001692:	3301      	adds	r3, #1
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
 8001696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001698:	2b02      	cmp	r3, #2
 800169a:	d9e5      	bls.n	8001668 <RCC_SetFlashLatency+0x48>
 800169c:	e01c      	b.n	80016d8 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a2:	e016      	b.n	80016d2 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016ac:	4413      	add	r3, r2
 80016ae:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d808      	bhi.n	80016cc <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80016ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016c2:	4413      	add	r3, r2
 80016c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80016ca:	e005      	b.n	80016d8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	3301      	adds	r3, #1
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d9e5      	bls.n	80016a4 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <RCC_SetFlashLatency+0x108>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 0207 	bic.w	r2, r3, #7
 80016e0:	4911      	ldr	r1, [pc, #68]	; (8001728 <RCC_SetFlashLatency+0x108>)
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80016e8:	f7fe fe78 	bl	80003dc <HAL_GetTick>
 80016ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80016ee:	e008      	b.n	8001702 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80016f0:	f7fe fe74 	bl	80003dc <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e007      	b.n	8001712 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <RCC_SetFlashLatency+0x108>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800170c:	429a      	cmp	r2, r3
 800170e:	d1ef      	bne.n	80016f0 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	0800179c 	.word	0x0800179c
 8001720:	080017a4 	.word	0x080017a4
 8001724:	080017ac 	.word	0x080017ac
 8001728:	58004000 	.word	0x58004000

0800172c <__libc_init_array>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	4d0d      	ldr	r5, [pc, #52]	; (8001764 <__libc_init_array+0x38>)
 8001730:	4c0d      	ldr	r4, [pc, #52]	; (8001768 <__libc_init_array+0x3c>)
 8001732:	1b64      	subs	r4, r4, r5
 8001734:	10a4      	asrs	r4, r4, #2
 8001736:	2600      	movs	r6, #0
 8001738:	42a6      	cmp	r6, r4
 800173a:	d109      	bne.n	8001750 <__libc_init_array+0x24>
 800173c:	4d0b      	ldr	r5, [pc, #44]	; (800176c <__libc_init_array+0x40>)
 800173e:	4c0c      	ldr	r4, [pc, #48]	; (8001770 <__libc_init_array+0x44>)
 8001740:	f000 f820 	bl	8001784 <_init>
 8001744:	1b64      	subs	r4, r4, r5
 8001746:	10a4      	asrs	r4, r4, #2
 8001748:	2600      	movs	r6, #0
 800174a:	42a6      	cmp	r6, r4
 800174c:	d105      	bne.n	800175a <__libc_init_array+0x2e>
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	f855 3b04 	ldr.w	r3, [r5], #4
 8001754:	4798      	blx	r3
 8001756:	3601      	adds	r6, #1
 8001758:	e7ee      	b.n	8001738 <__libc_init_array+0xc>
 800175a:	f855 3b04 	ldr.w	r3, [r5], #4
 800175e:	4798      	blx	r3
 8001760:	3601      	adds	r6, #1
 8001762:	e7f2      	b.n	800174a <__libc_init_array+0x1e>
 8001764:	08001838 	.word	0x08001838
 8001768:	08001838 	.word	0x08001838
 800176c:	08001838 	.word	0x08001838
 8001770:	0800183c 	.word	0x0800183c

08001774 <memset>:
 8001774:	4402      	add	r2, r0
 8001776:	4603      	mov	r3, r0
 8001778:	4293      	cmp	r3, r2
 800177a:	d100      	bne.n	800177e <memset+0xa>
 800177c:	4770      	bx	lr
 800177e:	f803 1b01 	strb.w	r1, [r3], #1
 8001782:	e7f9      	b.n	8001778 <memset+0x4>

08001784 <_init>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	bf00      	nop
 8001788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178a:	bc08      	pop	{r3}
 800178c:	469e      	mov	lr, r3
 800178e:	4770      	bx	lr

08001790 <_fini>:
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	bf00      	nop
 8001794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001796:	bc08      	pop	{r3}
 8001798:	469e      	mov	lr, r3
 800179a:	4770      	bx	lr
